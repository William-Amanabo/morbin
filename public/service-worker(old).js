/* eslint-disable no-restricted-globals */
/* eslint-disable no-undef */
/* importScripts('/__/firebase/7.17.1/firebase-app.js');
importScripts('/__/firebase/7.17.1/firebase-messaging.js');
importScripts('/__/firebase/init.js'); */

// Set this to true for production
var doCache = true;

// Name our cache
var CACHE_NAME = "my-pwa-cache-v1";

// sample import of scripts in service workers
//importScripts("./urlB64ToUint8Array.js");

// Delete old caches that are not our current one!
self.addEventListener("activate", (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((keyList) =>
      Promise.all(
        keyList.map((key) => {
          if (!cacheWhitelist.includes(key)) {
            console.log("Deleting cache: " + key);
            return caches.delete(key);
          }
        })
      )
    )
  );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener("install", function (event) {
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME).then(function (cache) {
        console.log("Caches opened !");
        // Get the assets manifest so we can see what our js file is named
        // This is because webpack hashes it
        fetch("asset-manifest.json")
          .then((response) => {
            response.json();
          })
          .then((assets) => {
            console.log("looking for assets", assets);
            // Open a cache and cache our files
            // We want to cache the page and the main.js generated by webpack
            // We could also cache any static assets like CSS or images
            /*               const urlsToCache = [
                "/",
                "/css/bootstrap/bootstrap.min.css",
                "/css/font-awesome/css/font-awesome.min.css",
                "/css/select2/select2.min.css",
                "/css/magnific-popup-css/magnific-popup.css",
                "/js/jquery/jquery.js",
                "/js/bootstrap/bootstrap.min.js",
                "/js/dropdown.js",
                "/js/validate.js",
                "/js/wow/wow.min.js",
                "/js/select2/select2.min.js",
                "/js/easing/jquery.easing.1.3.js",
                "/js/magnific-popup-js/jquery.magnific-popup.min.js",
                "/js/main.js",
                "/images/svg/Logo.svg",
                "/images/projects/1.jpg",
                "/images/projects/2.jpg",
                "/images/projects/3.jpg",
                "/images/projects/4.jpg",
                "/images/projects/5.jpg",
                "/images/projects/6.jpg",
                "/images/projects/7.jpg",
                "/images/svg/Logo.svg",

                assets["main.css"],
                assets["main.js"],
                assets["main.js.map"],
                assets["runtime-main.js"],
                assets["runtime-main.js.map"],
                assets["static/js/2.cc147e96.chunk.js"],
                assets["static/js/2.cc147e96.chunk.js.map"],
                assets["index.html"],
                assets["precache-manifest.dfd1361ffbdd6ae937385dfacb25b068.js"],
                assets["service-worker.js"],
                assets["static/css/main.15376f98.chunk.css.map"],
                assets["static/media/About.css"],
                assets["static/media/Experience.css"],
                assets["static/media/Skills.css"],
                assets["static/media/font-awesome.min.css"],
                assets["static/media/Contact.css"],
                 
              ]*/
            //cache.addAll(urlsToCache)
            const urlsToCache = ["/"];
            for (i in assets) {
              cache.addAll(assets[i]);
            }
            cache.addAll(urlsToCache);
            console.log("cached");
          });
      })
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener("fetch", function (event) {
  if (doCache) {
    event.respondWith(
      caches.match(event.request).then(function (response) {
        return response || fetch(event.request);
      })
    );
  }
});

// Handling push notification clicks
self.addEventListener("notificationclick", (payload) => {
  payload.notification.close();

  if (payload.action) {
    payload.waitUntil(
      clients.matchAll({ type: "window" }).then((clientsArr) => {
        // If a Window tab matching the targeted URL already exists, focus that;
        const hadWindowToFocus = clientsArr.some((windowClient) =>
          windowClient.url === payload.notification.data.url
            ? (windowClient.focus(), true)
            : false
        );
        // Otherwise, open a new tab to the applicable URL and focus it.
        if (!hadWindowToFocus)
          clients
            .openWindow(payload.notification.data.url)
            .then((windowClient) =>
              windowClient ? windowClient.focus() : null
            );
      })
    );
  }
});

self.addEventListener("push", (payload) => {
  console.log("push event listener payload", payload);
  console.log("push event listener payload.data.text()", payload.data.text());
  console.log(
    "push event listener payload.data",
    JSON.parse(payload.data.text())
  );

  let _data = payload.data.text() ? JSON.parse(payload.data.text()) : {};
  let notificationUrl = _data.url || "http://localhost:3000";
  let notificationTitle = _data.title;
  let notificationOptions = {
    body: _data.message,
    icon: _data.icon,
    tag: _data.tag,
    actions: [
      {
        action: notificationUrl,
        title: "open transactions",
      },
    ],
    data: { url: notificationUrl },
  };
  payload.waitUntil(
    self.registration.showNotification(notificationTitle, notificationOptions)
  );
});

//
/* self.addEventListener("message", (e) => {
  console.log("message event fires");

  if (e.data.type === "token") {     
        fetch("/pushNotification", {
          method:"POST",
          token: FIREBASE_MESSAGING.getToken(),
        }).then(console.log("Push notification enabled"))
      
      .catch((err) => {
        console.log("error getting permission :(", err);
      });
    }
  
}) */
